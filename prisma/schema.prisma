generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fieldReference"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User
model User {
  id            String         @id @default(uuid())
  name          String
  cpf           String         @unique
  email         String         @unique
  phone         String
  date_of_birth DateTime
  avatar_url    String?
  accounts      Account[]
  sessions      Session[]
  address       Address[]
  ShoppingCart  ShoppingCart[]
  Order         Order[]

  @@map("users")
}

model Account {
  id                  String  @id @default(uuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(uuid())
  session_token String   @unique
  user_id       String
  expires       DateTime

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Address {
  id             String  @id @default(uuid())
  street_address String
  number         String
  complement     String?
  district       String
  city           String
  state          String
  zip_code       String
  user_id        String
  order          Order[]

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("address")
}

// Order
model ShoppingCart {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  is_active  Boolean  @default(true)

  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?

  session_cart          SessionCart?            @relation(fields: [session_cart_id], references: [id])
  session_cart_id       String?                 @unique
  ProductOnShoppingCart ProductOnShoppingCart[]
  order                 Order?

  @@map("shoppin_carts")
}

model SessionCart {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  expire     Int

  shopping_cart ShoppingCart?
}

model Order {
  id           String @id @default(uuid())
  freight_cost Int
  total_amount Int

  user             User         @relation(fields: [user_id], references: [id])
  user_id          String
  shopping_cart    ShoppingCart @relation(fields: [shopping_cart_id], references: [id])
  shopping_cart_id String       @unique
  address          Address?     @relation(fields: [address_id], references: [id])
  address_id       String?

  @@map("orders")
}

model ProductOnShoppingCart {
  id               String       @id @default(uuid())
  product          Products     @relation(fields: [products_id], references: [id])
  products_id      String
  shopping_cart    ShoppingCart @relation(fields: [shopping_cart_id], references: [id])
  shopping_cart_id String
  quantity         Int

  @@unique([products_id, shopping_cart_id])
  @@map("product_on_shopping_cart")
}

// Products
model Categories {
  id   String @id @default(uuid())
  name String

  sub_category SubCategory[]

  @@map("categories")
}

model SubCategory {
  id          String @id @default(uuid())
  name        String
  category_id String

  category Categories @relation(fields: [category_id], references: [id])
  products Products[]

  @@map("sub_categories")
}

model Products {
  id                    String                  @id @default(uuid())
  name                  String
  slug                  String                  @unique
  price                 Int
  cost_price            Int
  brand                 String
  pet                   String?
  specie                String?
  image_url             String[]
  size                  String
  inventory             Int
  barcode               String?                 @unique
  registered_at         DateTime                @default(now())
  description           String[]
  line                  String?
  age                   String[]
  breed_size            String[]
  sub_category_id       String
  sub_category          SubCategory             @relation(fields: [sub_category_id], references: [id])
  ProductOnShoppingCart ProductOnShoppingCart[]

  @@map("products")
}
